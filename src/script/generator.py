from script import copier
from script import renamer
from script import resizer
from script import captioner
from script import archiver
from script import preprocesser as prep
from script import error_handler as hand

def generateDataset(folder, size, token, label, use_ai, every_caption):
    # This function gets as input parameters:
    # - folder: a list of images' path; 
    # - size: a couple made of 'height' and 'width' values for resize operation;
    # - token: a string formatted as keyword used for renaming and captioning operations;
    # - label: a boolean value that define if text generation for each image is allowed or not;
    # - use_ai: a boolean value that define if the use of AI is allowed or not;
    # - every_caption: a string that will be written in each captioning text file produced by captioning operation.

    # This function returns a file path:
    # - the filepath to return as correct result of operations is an archive file;
    # - the filepath to return as errors occurred is the readme file of the project. 
    
    # Check the input parameters.   
    # Initialize the operations' folders.
    # Check AI Model if allowed.
    init = prep.initGenerator(folder, size, token, label, use_ai, every_caption)

    # If there are issues with initialization:
    if not init:
        # Return readme file path.
        return hand.returnManualFile()

    # Set an exception handler for operations' errors:
    try:
        # Copy the uploaded folder in 'local' folder
        # and get a list of copied files' path.
        # <local_folder> represents a real folder.
        local_folder = copier.copyFolder(folder)
        
        # Rename the files stored in 'local' folder 
        # and get a list of renamed files' path.
        # <renamed_folder> represents a virtual verion of the real 'local' folder.
        renamed_folder = renamer.renameImages(local_folder, token)

        # Check if text generation is allowed:
        if label == True:
            # Generate one text file for each image file, containing the image captions:
            # - the first caption to write is the token;
            # - if allowed, the second caption is generated by AI;
            # - the other captions can be passed as input and they will be part of every text file produced;
            # Get a list of produced files' path.
            # <txt_folder> represents a virtual folder.
            txt_folder = captioner.imageCaptioning(renamed_folder, token, use_ai, every_caption)

        # Resize the renamed files
        # and get a list of resized files' path.
        # <resized_folder> represents a virtual folder.
        resized_folder = resizer.resizeImages(renamed_folder, size)
        
        # Check if text generation is allowed:
        if label == True:
            # Merge <resize_folder> and <txt_folder> to get a list of files' path to group
            # in order to generate an archive file. 
            processed_folder = resized_folder.extend(txt_folder)
        else:
            # Only files in resized folder are processed
            processed_folder = resized_folder 

        # Note that <processed_folder> is never used.

        # Create an archive file of processed data
        archive_file = archiver.archiveProcessedData()

        # Return the archive file path.
        return archive_file

    # An error occurs during generation's operations:
    except Exception as e: 
        # Print the exception.
        print("[ERROR] " + str(e))

        # Return readme file path.
        return hand.returnManualFile()
